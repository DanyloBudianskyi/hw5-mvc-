@model UserInfoForm
@{
    ViewData["Title"] = "Edit " + ViewData["id"];
    var i = 0;
    var list = new SelectList(Model.Professions.Select(
        x => new { Id = i++, Title = x })
        .ToList(), "Id", "Title");

    var userSkills = ViewData["userSkills"] as List<UserSkill>;
    var skills = ViewData["skills"] as List<Skill>;
    var availableSkills = ViewData["availableSkills"] as List<Skill>;
}

<div>
    <h1 class="display-4">@ViewData["Title"]</h1>
    <form method="post" enctype="multipart/form-data" asp-controller="UserInfo" asp-action="Edit" asp-route-id="@ViewData["id"]">
        <div class="card">
            <div class="card-body">

                <div class="mb-3">
                    @Html.LabelFor(x => x.Name, new { @class = "form-label" })
                    @Html.TextBoxFor(x => x.Name, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.Name, null, new { @class = "text-danger" })
                </div>
                <div class="mb-3">
                    @Html.LabelFor(x => x.Email, new { @class = "form-label" })
                    @Html.TextBoxFor(x => x.Email, new { @class = "form-control", type="email"})
                    @Html.ValidationMessageFor(x => x.Email, null, new { @class = "text-danger" })
                </div>
                <div class="mb-3">
                    @Html.LabelFor(x => x.Experience, new { @class = "form-label" })
                    @Html.TextBoxFor(x => x.Experience, new { @class = "form-control", type = "number", min = 0, max = 99, step = 1 })
                    @Html.ValidationMessageFor(x => x.Experience, null, new { @class = "text-danger" })
                </div>
                <div class="mb-3">
                    @Html.LabelFor(x => x.Salary, new { @class = "form-label" })
                    @Html.TextBoxFor(x => x.Salary, new { @class = "form-control", type = "number", min = 0, step = 0.01 })
                    @Html.ValidationMessageFor(x => x.Salary, null, new { @class = "text-danger" })
                </div>
                <div class="mb-3">
                    @Html.LabelFor(x => x.ProfessionId, new { @class = "form-label" })
                    @Html.DropDownListFor(x => x.ProfessionId, list, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.ProfessionId, null, new { @class = "text-danger" })
                </div>
                <div class="mb-3">
                    @Html.LabelFor(x => x.Description, new { @class = "form-label" })
                    @Html.TextAreaFor(x => x.Description, new { @class = "form-control", rows = 5 })
                    @Html.ValidationMessageFor(x => x.Description, null, new { @class = "text-danger" })
                </div>
                <div class="mb-3">
                    @Html.LabelFor(x => x.Birthday, new { @class = "form-label" })
                    @Html.TextBoxFor(x => x.Birthday, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date" })
                    @Html.ValidationMessageFor(x => x.Birthday, null, new { @class = "text-danger" })
                </div>
                <div class="mb-3">
                    @Html.LabelFor(x => x.Image, new { @class = "form-label" })
                    @Html.TextBoxFor(x => x.Image, new { @class = "form-control", type = "file", accept = "*.jpg,*.jpeg,*.png" })
                    @Html.ValidationMessageFor(x => x.Image, null, new { @class = "text-danger" })
                </div>
                <div class="mb-3">
                    @Html.LabelFor(x => x.Gallery, new { @class = "form-label" })
                    @Html.TextBoxFor(x => x.Gallery, new { @class = "form-control", type = "file", accept = "*.jpg,*.jpeg,*.png", multiple = true })
                    @Html.ValidationMessageFor(x => x.Gallery, null, new { @class = "text-danger" })
                </div>
            </div>
            <div class="card-footer">
                <button class="btn btn-primary" type="submit">Save</button>
            </div>
        </div>
    </form>
    <div>
        <table class="table table-hover" data-user-id="@ViewData["id"]">
            <thead>
            </thead>
            <tbody>
                @foreach (var userSkill in userSkills)
                {
                    var currentSkill = skills.First(x => x.Id == userSkill.SkillId);
                    <tr data-model-id="@userSkill.SkillId">
                        <td>
                            @if (currentSkill.Icon != null)
                            {
                                <img style="max-width: 50px;" class="img-thumbnail" src="@currentSkill.Icon.Src" />
                            }
                        </td>
                        <td>
                            @currentSkill.Title
                        </td>
                        <td>
                            <input class="skill-level form-control" type="number" min="1" max="100" value="@userSkill.Level" />
                        </td>
                        <td>
                            <button class="btn btn-primary edit-skill">Edit</button>
                            <button class="btn btn-danger delete-skill">Remove</button>
                        </td>
                    </tr>
                }
                @foreach (var skill in availableSkills)
                {
                    <tr data-model-id="@skill.Id">
                        <td>
                            @if (skill.Icon != null)
                            {
                                <img style="max-width: 50px;" class="img-thumbnail" src="@skill.Icon.Src" />
                            }
                        </td>
                        <td>
                            @skill.Title
                        </td>
                        <td>
                            <input class="skill-level" typeof="number" min="1" max="100" value="" />
                        </td>
                        <td colspan="2">
                            
                            <button class="btn btn-success add-skill">Add</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <a asp-area=""
       asp-controller="UserInfo"
       asp-action="Index"
       class="btn btn-primary">Return</a>
</div>


@section Scripts {
    <script>
        
        document.querySelectorAll(".add-skill").forEach(el => {
            el.addEventListener("click", e => {
                const row = e.target.closest("tr");
                const skillId = row.getAttribute("data-model-id");
                const userId = document.querySelector("table").getAttribute("data-user-id");
                const level = row.querySelector("input.skill-level").value;

                const data = {
                    SkillId: skillId,
                    UserId: userId,
                    Level: level
                };

                fetch("/UserInfo/AddSkill", {
                    method: "post",
                    headers: {
                        "Content-type": "application/json"
                    },
                    body: JSON.stringify(data)
                }).then(() => {
                    window.location.reload();
                })
                    .catch(err => {
                        console.log(err);
                    });
            });
        });

        document.querySelectorAll(".delete-skill").forEach(el => {
            el.addEventListener("click", e => {
                const row = e.target.closest("tr");
                const skillId = row.getAttribute("data-model-id");
                const userId = document.querySelector("table").getAttribute("data-user-id");

                const data = {
                    SkillId: skillId,
                    UserId: userId
                }

                fetch("/UserInfo/DeleteSkill", {
                    method: "post",
                    headers: {
                        "Content-type": "application/json"
                    },
                    body: JSON.stringify(data)
                })
                .then(() => {
                    window.location.reload()
                })
                .catch(err => {
                    console.log(err)
                })
            })
        })

        document.querySelectorAll(".edit-skill").forEach(el => {
            el.addEventListener("click", e => {
                const row = e.target.closest("tr");
                const skillId = row.getAttribute("data-model-id");
                const userId = document.querySelector("table").getAttribute("data-user-id");
                const level = row.querySelector("input.skill-level").value;

                const data = {
                    SkillId: skillId,
                    UserId: userId,
                    Level: level
                };

                fetch("/UserInfo/EditSkill", {
                    method: "post",
                    headers: {
                        "Content-type": "application/json"
                    },
                    body: JSON.stringify(data)
                }).then(() => {
                    window.location.reload();
                })
                    .catch(err => {
                        console.log(err);
                    });
            });
        });
    </script>
}


